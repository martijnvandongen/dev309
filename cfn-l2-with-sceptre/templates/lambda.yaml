Parameters:
  SubnetId:
    Type: String
  SecurityGroupId:
    Type: String
  RouteTableId:
    Type: String
  ListsTable:
    Type: String
  ListsTableArn:
    Type: String
Resources:
  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns: 
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
  FunctionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: dynamodb:*
            Effect: Allow
            Resource: !Ref ListsTableArn
        Version: '2012-10-17'
      PolicyName: FunctionRolePolicy
      Roles:
        - !Ref FunctionRole
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: dev309
        S3Key: app.zip
      Environment:
        Variables:
          LISTS_TABLE: !Ref ListsTable
      Handler: main.lambda_handler
      Role: !GetAtt FunctionRole.Arn
      Runtime: python3.12
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref SubnetId
  LambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      Cors:
        AllowCredentials: true
        AllowHeaders: ["date", "keep-alive"]
        AllowMethods: ["*"]
        AllowOrigins: ['*']
        ExposeHeaders: ["date", "keep-alive"]
      TargetFunctionArn: !GetAtt LambdaFunction.Arn
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !GetAtt LambdaFunction.Arn
      FunctionUrlAuthType: NONE
      Principal: '*'
Outputs:
  FunctionUrl:
    Value: !GetAtt LambdaFunctionUrl.FunctionUrl
